// Document Database Analytics Queries

// Find all enterprise tier customers
// Returns customers with tier="enterprise" and their full details
db.customers.find({ tier: "enterprise" })

// Calculate total resource usage per customer
// Groups usage by customerId and sums computeTime and dataProcessed
// Returns customer IDs with their total resource consumption
db.usage_logs.aggregate([
  {
    $group: {
      _id: "$customerId",
      totalComputeTime: { $sum: "$resourceUsage.computeTime" },
      totalDataProcessed: { $sum: "$resourceUsage.dataProcessed" }
    }
  }
])

// List unique features used by a specific customer
// Returns distinct feature names used by customer CUST001
db.usage_logs.distinct("feature", { customerId: "CUST001" })

// Find open high-priority tickets with customer information
// Joins support tickets with customer data for high-priority open tickets
db.support_tickets.aggregate([
  {
    $match: {
      status: "open",
      priority: "high"
    }
  },
  {
    $lookup: {
      from: "customers",
      localField: "customerId",
      foreignField: "customerId",
      as: "customerInfo"
    }
  }
])

// Calculate average ticket resolution time in hours
// For resolved tickets, computes time between creation and resolution
db.support_tickets.aggregate([
  {
    $match: { status: "resolved" }
  },
  {
    $project: {
      resolutionTime: {
        $divide: [
          { $subtract: [{ $toDate: "$updatedAt" }, { $toDate: "$createdAt" }] },
          3600000 // Convert to hours
        ]
      }
    }
  },
  {
    $group: {
      _id: null,
      avgResolutionTime: { $avg: "$resolutionTime" }
    }
  }
])

// Calculate total subscription revenue by tier
// Groups customers by tier and sums their subscription amounts
db.customers.aggregate([
  {
    $group: {
      _id: "$tier",
      totalRevenue: { $sum: "$subscription.amount" },
      customerCount: { $sum: 1 }
    }
  }
])

// Find most frequently used features
// Counts usage occurrences of each feature and sorts by frequency
db.usage_logs.aggregate([
  {
    $group: {
      _id: "$feature",
      usageCount: { $sum: 1 }
    }
  },
  {
    $sort: { usageCount: -1 }
  }
])

// Find customers with multiple support tickets
// Groups tickets by customer and counts tickets per customer
db.support_tickets.aggregate([
  {
    $group: {
      _id: "$customerId",
      ticketCount: { $sum: 1 }
    }
  },
  {
    $match: {
      ticketCount: { $gt: 1 }
    }
  }
])

// Analyze customer distribution and revenue by region
// Groups customers by region and calculates metrics per region
db.customers.aggregate([
  {
    $group: {
      _id: "$metadata.region",
      customerCount: { $sum: 1 },
      totalRevenue: { $sum: "$subscription.amount" }
    }
  }
])